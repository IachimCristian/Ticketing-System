@page
@model TicketingSystem.Web.Pages.Dashboard.IndexModel
@{
    ViewData["Title"] = "Dashboard";
}

@if (TempData["ErrorMessage"] != null)
{
    <div class="alert alert-danger alert-dismissible fade show alert-animated alert-danger-animated" role="alert">
        @TempData["ErrorMessage"]
        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
    </div>
}

@if (TempData["SuccessMessage"] != null)
{
    <div class="alert alert-success alert-dismissible fade show alert-animated alert-success-animated" role="alert">
        @TempData["SuccessMessage"]
        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
    </div>
}

<div class="d-flex justify-content-between align-items-center mb-4 animate-fade-in-down">
    <a asp-page="/Index" class="logo text-decoration-none">
        <img src="~/images/logo-no-background.png" alt="Ticksy" style="height: 35px;" class="logo-img hover-scale" 
             onerror="this.style.display='none'; this.nextElementSibling.style.display='block';" />
        <span class="logo-text hover-scale" style="display: none;">Ticksy</span>
    </a>
    <a asp-page="/Account/Logout" class="btn btn-outline-dark btn-sm btn-animated hover-glow">Logout</a>
</div>

<h2 class="fs-5 mb-4 animate-fade-in-up animate-delay-1">Welcome, @Model.Username!</h2>

@if (!string.IsNullOrEmpty(Model.ErrorMessage))
{
    <div class="alert alert-danger alert-animated alert-danger-animated">
        @Model.ErrorMessage
    </div>
}

<div class="card mb-4 card-animated hover-lift animate-fade-in-up animate-delay-2">
    <div class="card-header d-flex justify-content-between">
        <h5 class="mb-0 animate-fade-in-left">My Tickets</h5>
    </div>
    <div class="card-body">
        @if (Model.PurchasedEvents.Any())
        {
            <div class="table-responsive">
                <table class="table table-hover table-animated">
                    <thead class="animate-fade-in-down">
                        <tr>
                            <th>Ticket #</th>
                            <th>Event</th>
                            <th>Date</th>
                            <th>Status</th>
                            <th>Type</th>
                            <th></th>
                        </tr>
                    </thead>
                    <tbody class="stagger-animation">
                        @foreach (var ticket in Model.PurchasedEvents)
                        {
                            <tr class="hover-lift transition-all">
                                <td>@ticket.TicketNumber</td>
                                <td>@ticket.EventName</td>
                                <td>@ticket.Date.ToString("MMM dd, yyyy")</td>
                                <td>
                                    @if (ticket.Status == "Upcoming")
                                    {
                                        <span class="badge bg-success animate-pulse">@ticket.Status</span>
                                    }
                                    else
                                    {
                                        <span class="badge bg-secondary">@ticket.Status</span>
                                    }
                                </td>
                                <td>@ticket.TicketType</td>
                                <td>
                                    <a asp-page="/Tickets/Confirmation" asp-route-id="@ticket.Id" class="btn btn-sm btn-outline-dark btn-animated hover-glow">View</a>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        }
        else
        {
            <p class="text-muted mb-0 animate-fade-in-up">You haven't purchased any tickets yet.</p>
        }
    </div>
</div>

<h3 class="fs-5 mb-3 animate-fade-in-up animate-delay-3">Upcoming Events</h3>

<div class="row g-2 mb-4 stagger-animation">
    @foreach (var item in Model.UpcomingEvents.Take(3))
    {
        <div class="col-md-4 col-sm-6 mb-2">
            <div class="card h-100 event-card card-animated hover-lift">
                @* Event images have been removed from the model *@
                <div class="event-image-placeholder hover-scale">
                    <span>X</span>
                </div>
                <div class="card-body p-3">
                    <h5 class="card-title fs-6 mb-1">@item.Title</h5>
                    <p class="card-text mb-2">
                        <small class="text-muted d-block">@item.Date.ToString("MMM dd, yyyy")</small>
                        <small class="text-muted d-block">@item.Location</small>
                    </p>
                    @if (item.TicketPrice <= 0)
                    {
                        <span class="badge bg-info animate-glow">Free</span>
                    }
                    else
                    {
                        <span class="fw-bold">$@item.TicketPrice.ToString("0.00")</span>
                    }
                </div>
                <div class="card-footer p-2 text-center">
                    <a asp-page="/Events/Details" asp-route-id="@item.Id" class="btn btn-dark btn-sm btn-animated hover-slide">View Event</a>
                </div>
            </div>
        </div>
    }
</div>

<div class="text-center animate-fade-in-up animate-delay-4">
    <a asp-page="/Events/Index" class="btn btn-dark btn-animated hover-glow animate-pulse">Browse All Events</a>
</div>

<style>
    .event-card {
        transition: all 0.3s cubic-bezier(0.25, 0.8, 0.25, 1);
        transform: translateZ(0);
        border-radius: 12px;
        overflow: hidden;
        border: 1px solid #e9ecef;
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.08);
    }
    
    .event-card:hover {
        transform: translateY(-8px) scale(1.02);
        box-shadow: 0 12px 30px rgba(0, 0, 0, 0.12);
    }
    
    .event-image-placeholder {
        height: 110px; /* Smaller for cleaner look */
        border-radius: 12px 12px 0 0;
    }
    
    .event-image {
        height: 110px;
        object-fit: cover;
        transition: transform 0.3s ease;
        border-radius: 12px 12px 0 0;
    }
    
    .event-image:hover {
        transform: scale(1.1);
    }
    
    .card-body {
        padding: 1rem; /* Reduced padding */
    }

    .card-title {
        font-size: 0.95rem; /* Smaller title */
        font-weight: 600;
        margin-bottom: 0.5rem;
        line-height: 1.3;
    }

    .card-text {
        font-size: 0.8rem; /* Smaller text */
        margin-bottom: 0.4rem;
        line-height: 1.4;
    }

    .card-text small {
        font-size: 0.75rem;
        color: #6c757d;
    }

    .fw-bold {
        font-size: 0.9rem;
        font-weight: 600;
    }
    
    .badge {
        font-size: 0.7rem;
        padding: 0.25em 0.5em;
        border-radius: 4px;
        transition: all 0.3s ease;
    }
    
    .badge:hover {
        transform: scale(1.05);
    }

    .card-footer {
        padding: 0.75rem 1rem;
        background-color: #f8f9fa;
        border-top: 1px solid #e9ecef;
    }

    .btn-sm {
        font-size: 0.8rem;
        padding: 0.4rem 0.8rem;
        border-radius: 6px;
    }

    .table {
        font-size: 0.85rem;
    }

    .table th {
        font-size: 0.8rem;
        font-weight: 600;
        text-transform: uppercase;
        letter-spacing: 0.5px;
        color: #6c757d;
        border-bottom: 2px solid #e9ecef;
        padding: 0.75rem;
    }

    .table td {
        padding: 0.75rem;
        border-top: 1px solid #f1f3f4;
        vertical-align: middle;
    }

    .table tbody tr:hover {
        background-color: rgba(0, 123, 255, 0.03);
    }

    /* Card header styling */
    .card-header {
        background-color: #f8f9fa;
        border-bottom: 1px solid #e9ecef;
        padding: 1rem 1.25rem;
        font-size: 1rem;
        font-weight: 600;
    }

    /* Spacing adjustments */
    .mb-4 {
        margin-bottom: 2rem !important;
    }

    .g-2 {
        --bs-gutter-x: 1rem;
        --bs-gutter-y: 1rem;
    }

    /* Clean button styling */
    .btn-dark {
        background-color: #212121;
        border-color: #212121;
        font-size: 0.85rem;
        padding: 0.5rem 1rem;
        border-radius: 6px;
        font-weight: 500;
    }

    .btn-dark:hover {
        background-color: #000;
        border-color: #000;
        transform: translateY(-1px);
    }
    
    /* Custom scrollbar for table */
    .table-responsive::-webkit-scrollbar {
        height: 6px;
    }
    
    .table-responsive::-webkit-scrollbar-track {
        background: #f1f1f1;
        border-radius: 6px;
    }
    
    .table-responsive::-webkit-scrollbar-thumb {
        background: linear-gradient(45deg, #667eea, #764ba2);
        border-radius: 6px;
    }
    
    .table-responsive::-webkit-scrollbar-thumb:hover {
        background: linear-gradient(45deg, #764ba2, #667eea);
    }

    /* Alert styling */
    .alert {
        border-radius: 8px;
        border: none;
        font-size: 0.875rem;
        padding: 0.75rem 1rem;
    }
</style>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Add sparkle effect to success badges
            const successBadges = document.querySelectorAll('.badge.bg-success');
            successBadges.forEach(badge => {
                badge.addEventListener('mouseenter', function() {
                    this.style.background = 'linear-gradient(45deg, #28a745, #20c997)';
                });
                badge.addEventListener('mouseleave', function() {
                    this.style.background = '';
                });
            });
            
            // Add ripple effect to buttons
            const buttons = document.querySelectorAll('.btn-animated');
            buttons.forEach(button => {
                button.addEventListener('click', function(e) {
                    const ripple = document.createElement('span');
                    const rect = this.getBoundingClientRect();
                    const size = Math.max(rect.width, rect.height);
                    const x = e.clientX - rect.left - size / 2;
                    const y = e.clientY - rect.top - size / 2;
                    
                    ripple.style.width = ripple.style.height = size + 'px';
                    ripple.style.left = x + 'px';
                    ripple.style.top = y + 'px';
                    ripple.classList.add('ripple');
                    
                    this.appendChild(ripple);
                    
                    setTimeout(() => {
                        ripple.remove();
                    }, 600);
                });
            });
            
            // Animate numbers counting up
            const numbers = document.querySelectorAll('.fw-bold');
            numbers.forEach(number => {
                if (number.textContent.includes('$')) {
                    const finalValue = parseFloat(number.textContent.replace('$', ''));
                    let currentValue = 0;
                    const increment = finalValue / 30;
                    
                    const timer = setInterval(() => {
                        currentValue += increment;
                        if (currentValue >= finalValue) {
                            currentValue = finalValue;
                            clearInterval(timer);
                        }
                        number.textContent = '$' + currentValue.toFixed(2);
                    }, 50);
                }
            });
        });
    </script>
} 