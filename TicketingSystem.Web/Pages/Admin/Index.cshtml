@page
@model TicketingSystem.Web.Pages.Admin.IndexModel
@{
    ViewData["Title"] = "Admin Dashboard";
    Layout = "_AdminLayout";
}

<div class="admin-content active" id="dashboard-content">
    <h3 class="mb-4">Dashboard Overview</h3>
    
    <div class="row">
        <div class="col-md-3 mb-4">
            <div class="card">
                <div class="card-body">
                    <h5 class="card-title">Users</h5>
                    <p class="card-text">Total: @Model.UserCount</p>
                    <a href="#" class="btn btn-dark btn-sm" onclick="showSection('users')">Manage Users</a>
                </div>
            </div>
        </div>
        
        <div class="col-md-3 mb-4">
            <div class="card">
                <div class="card-body">
                    <h5 class="card-title">Events</h5>
                    <p class="card-text">Total: @Model.EventCount</p>
                    <a href="#" class="btn btn-dark btn-sm" onclick="showSection('events')">Manage Events</a>
                </div>
            </div>
        </div>
        
        <div class="col-md-3 mb-4">
            <div class="card">
                <div class="card-body">
                    <h5 class="card-title">Transactions</h5>
                    <p class="card-text">Total: @Model.TransactionCount</p>
                    <a href="#" class="btn btn-dark btn-sm" onclick="showSection('transactions')">View Transactions</a>
                </div>
            </div>
        </div>
        
        <div class="col-md-3 mb-4">
            <div class="card">
                <div class="card-body">
                    <h5 class="card-title">Refunds</h5>
                    <p class="card-text">Manage ticket refunds</p>
                    <a href="/Admin/Refunds" class="btn btn-dark btn-sm">Manage Refunds</a>
                </div>
            </div>
        </div>
    </div>
    
    <div class="row">
        <div class="col-md-3 mb-4">
            <div class="card">
                <div class="card-body">
                    <h5 class="card-title">Test Notifications</h5>
                    <p class="card-text">Test notification system</p>
                    <a href="/Admin/TestNotifications" class="btn btn-dark btn-sm">Test System</a>
                </div>
            </div>
        </div>
    </div>
</div>

<div class="admin-content" id="users-content">
    <h3 class="mb-4">Users Management</h3>
    <div class="card">
        <div class="card-body">
            @if (!ViewData.ModelState.IsValid)
            {
                <div class="alert alert-danger">
                    @foreach (var error in ViewData.ModelState.Values.SelectMany(v => v.Errors))
                    {
                        <div>@error.ErrorMessage</div>
                    }
                </div>
            }
            
            <form method="post" asp-page="/Admin/Index">
                <div class="table-responsive">
                    <table class="table table-hover">
                        <thead>
                            <tr>
                                <th>Username</th>
                                <th>Email</th>
                                <th>Type</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            @for (int i = 0; i < Model.Users.Count; i++)
                            {
                                var user = Model.Users[i];
                                var currentUsername = HttpContext.Session.GetString("Username");
                                var isCurrentAdmin = user.Username == currentUsername;

                                <tr id="user-row-@user.Id" class="@(isCurrentAdmin ? "table-warning" : "") @(user.Username == "system" || user.Username == "system-customer" ? "table-info" : "")">
                                    <td>
                                        @user.Username
                                        @if (isCurrentAdmin)
                                        {
                                            <span class="badge bg-primary ms-2">You</span>
                                        }
                                        @if (user.Username == "system" || user.Username == "system-customer")
                                        {
                                            <span class="badge bg-secondary ms-2">System</span>
                                        }
                                        <input type="hidden" name="Users[@i].Id" value="@user.Id" />
                                        <input type="hidden" name="Users[@i].Username" value="@user.Username" />
                                        <input type="hidden" name="Users[@i].OriginalUserType" value="@user.UserType" />
                                    </td>
                                    <td>
                                        <input type="text" class="form-control" name="Users[@i].Email" value="@user.Email" 
                                               @(isCurrentAdmin || user.Username == "system" || user.Username == "system-customer" ? "readonly" : "") />
                                    </td>
                                    <td>
                                        <select name="Users[@i].UserType" class="form-select" @(isCurrentAdmin || user.Username == "system" || user.Username == "system-customer" ? "disabled" : "")>
                                            <option value="Customer" selected="@(user.UserType == "Customer")">Customer</option>
                                            <option value="Organizer" selected="@(user.UserType == "Organizer")">Organizer</option>
                                            <option value="Admin" selected="@(user.UserType == "Admin")">Admin</option>
                                        </select>
                                        @if (isCurrentAdmin || user.Username == "system" || user.Username == "system-customer")
                                        {
                                            <input type="hidden" name="Users[@i].UserType" value="@user.UserType" />
                                        }
                                    </td>
                                    <td>
                                        @if (isCurrentAdmin)
                                        {
                                            <span class="text-muted">Cannot modify yourself</span>
                                        }
                                        else if (user.Username == "system" || user.Username == "system-customer")
                                        {
                                            <span class="text-muted">System account</span>
                                        }
                                        else
                                        {
                                            <button type="button" class="btn btn-sm btn-outline-danger"
                                                    onclick="removeUser('@user.Id', '@user.UserType', '@user.Username')">
                                                Remove
                                            </button>
                                        }
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
                <div class="text-end mt-3">
                    <button type="submit" class="btn btn-success">Save Changes</button>
                </div>
            </form>
        </div>
    </div>
</div>

<div class="admin-content" id="events-content">
    <h3 class="mb-4">Events Management</h3>
    <div class="card">
        <div class="card-body">
            <div class="table-responsive">
                <table class="table table-hover">
                    <thead>
                        <tr>
                            <th>Title</th>
                            <th>Date</th>
                            <th>Location</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var evt in Model.Events)
                        {
                            <tr>
                                <td>@evt.Title</td>
                                <td>@evt.Date.ToString("MMM dd, yyyy")</td>
                                <td>@evt.Location</td>
                                <td>
                                    <button class="btn btn-sm btn-outline-dark">Edit</button>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>

<div class="admin-content" id="transactions-content">
    <h3 class="mb-4">Transactions History</h3>
    <div class="card">
        <div class="card-body">
            <div class="table-responsive">
                <table class="table table-hover">
                    <thead>
                        <tr>
                            <th>ID</th>
                            <th>User</th>
                            <th>Event</th>
                            <th>Amount</th>
                            <th>Date</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var transaction in Model.Transactions)
                        {
                            <tr>
                                <td>@transaction.Id.ToString().Substring(0, 8)</td>
                                <td>@transaction.Username</td>
                                <td>@transaction.EventTitle</td>
                                <td>$@transaction.Amount.ToString("0.00")</td>
                                <td>@transaction.Date.ToString("MMM dd, yyyy")</td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>

<!-- Custom Modal for Confirmations and Messages -->
<div class="modal fade" id="customModal" tabindex="-1" aria-labelledby="customModalLabel" aria-hidden="true" data-bs-backdrop="false">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content border-0 shadow-lg">
            <div class="modal-header border-0 pb-0">
                <h5 class="modal-title fw-bold" id="customModalLabel">Confirm Action</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body pt-2">
                <div class="d-flex align-items-center">
                    <div class="me-3">
                        <i class="fas fa-exclamation-triangle text-warning fs-2" id="modalIcon"></i>
                    </div>
                    <div>
                        <p class="mb-0 fs-6" id="modalMessage">Are you sure you want to perform this action?</p>
                    </div>
                </div>
            </div>
            <div class="modal-footer border-0 pt-0">
                <button type="button" class="btn btn-secondary px-4" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-danger px-4" id="confirmButton">Confirm</button>
            </div>
        </div>
    </div>
</div>

<!-- Success/Error Toast -->
<div class="toast-container position-fixed top-0 end-0 p-3">
    <div id="actionToast" class="toast" role="alert" aria-live="assertive" aria-atomic="true">
        <div class="toast-header">
            <i class="fas fa-check-circle text-success me-2" id="toastIcon"></i>
            <strong class="me-auto" id="toastTitle">Success</strong>
            <button type="button" class="btn-close" data-bs-dismiss="toast" aria-label="Close"></button>
        </div>
        <div class="toast-body" id="toastMessage">
            Action completed successfully.
        </div>
    </div>
</div>

<style>
    /* Custom modal styling */
    .modal-content {
        border-radius: 15px;
        box-shadow: 0 10px 30px rgba(0, 0, 0, 0.5);
        border: 2px solid rgba(255, 255, 255, 0.1);
    }
    
    .modal-header {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
        border-radius: 15px 15px 0 0;
        padding: 1.5rem;
    }
    
    .modal-header .btn-close {
        filter: invert(1);
    }
    
    .modal-body {
        padding: 2rem;
        background-color: white;
    }
    
    .modal-footer {
        padding: 1rem 2rem 2rem;
        background-color: white;
        border-radius: 0 0 15px 15px;
    }
    
    /* Toast styling */
    .toast {
        border-radius: 10px;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
    }
    
    /* System account styling */
    .table-info {
        background-color: rgba(13, 202, 240, 0.1) !important;
        border-left: 4px solid #0dcaf0;
    }
    
    .badge.bg-secondary {
        background-color: #6c757d !important;
        font-size: 0.75em;
    }
</style>

@section Scripts {
    <script>
        // Add form submission debugging
        document.addEventListener('DOMContentLoaded', function() {
            const form = document.querySelector('form[method="post"]');
            if (form) {
                form.addEventListener('submit', function(e) {
                    console.log('Form is being submitted');
                    
                    // Log all form data
                    const formData = new FormData(form);
                    for (let [key, value] of formData.entries()) {
                        console.log(`${key}: ${value}`);
                    }
                });
            }
        });

        // Custom modal functions
        function showCustomModal(title, message, iconClass, onConfirm) {
            document.getElementById('customModalLabel').textContent = title;
            document.getElementById('modalMessage').textContent = message;
            
            const icon = document.getElementById('modalIcon');
            icon.className = iconClass;
            
            const confirmBtn = document.getElementById('confirmButton');
            confirmBtn.onclick = function() {
                const modal = bootstrap.Modal.getInstance(document.getElementById('customModal'));
                modal.hide();
                if (onConfirm) onConfirm();
            };
            
            const modal = new bootstrap.Modal(document.getElementById('customModal'));
            modal.show();
        }

        function showToast(title, message, type = 'success') {
            const toast = document.getElementById('actionToast');
            const toastTitle = document.getElementById('toastTitle');
            const toastMessage = document.getElementById('toastMessage');
            const toastIcon = document.getElementById('toastIcon');
            
            toastTitle.textContent = title;
            toastMessage.textContent = message;
            
            if (type === 'success') {
                toastIcon.className = 'fas fa-check-circle text-success me-2';
            } else if (type === 'error') {
                toastIcon.className = 'fas fa-exclamation-circle text-danger me-2';
            }
            
            const bsToast = new bootstrap.Toast(toast);
            bsToast.show();
        }

        async function removeUser(id, userType, username) {
            // Show custom confirmation modal
            showCustomModal(
                'Delete User',
                `Are you sure you want to remove user "${username}"? This action cannot be undone.`,
                'fas fa-exclamation-triangle text-warning fs-2',
                async function() {
                    const formData = new FormData();
                    formData.append("id", id);
                    formData.append("userType", userType);

                    try {
                        const response = await fetch('/Admin/Index?handler=Remove', {
                            method: "POST",
                            body: formData,
                            headers: {
                                'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]')?.value
                            }
                        });

                        const result = await response.json();
                        
                        if (result.success) {
                            document.getElementById(`user-row-${id}`).remove();
                            showToast('Success', `User "${username}" has been removed successfully.`, 'success');
                        } else {
                            showToast('Error', result.message || "Error removing user.", 'error');
                        }
                    } catch (error) {
                        showToast('Error', "Network error occurred while removing user.", 'error');
                        console.error('Error:', error);
                    }
                }
            );
        }

        function showSection(section) {
            // Hide all content sections
            document.querySelectorAll('.admin-content').forEach(el => {
                el.classList.remove('active');
            });

            // Show the selected section
            document.getElementById(section + '-content').classList.add('active');

            // Update active nav item
            document.querySelectorAll('.admin-nav-item').forEach(el => {
                el.classList.remove('active');
            });

            const navItem = document.querySelector(`.admin-nav-item[data-section="${section}"]`);
            if (navItem) {
                navItem.classList.add('active');
            }
        }

        document.addEventListener('DOMContentLoaded', function () {
            const section = '@ViewData["Section"]' || 'dashboard';
            showSection(section);
        });

    </script>
}